Scripts
-------

Every unit contains a script which control the level flow e.g. switches, doors, cinematics etc, these scripts are PE files exporting functions called by the game.

Scripts can be found extracting the unit DRM file using https://github.com/Gh0stBlade/cdcEngineTools and looking for a .gnc file with MS-DOS stub (This program cannot be run in DOS mode), next remove the .SECT header and drop the file in your favorite disassembler e.g. IDA Pro, Ghidra.

Exports
~~~~~~~

The following symbols are usually exported:

* EventMain
* EventRelocate
* CallTrigger
* IsTriggerActive
* EventDebug

The last `EventDebug` is not a function but instead array of debug strings.
[source,cpp]
----
// from pu1
char* EventDebug[8] = { "doorsopened", "pusha", 
                        "pushb", "introcine", 
                        "tutorial_start", "doorreveala", 
                        "level_title_start", "sherpasilent" };
                        // [...]
----

The `EventMain` function will be called from the game loop every loop which is where most of the logic is.
[source,cpp]
----
int EventMain(GameTracker* a1, StreamUnit* a2, int a3)
{
	(a3 + 1512)("02_CN_Hotel", 0); // StartBlockingCine
}
----

**a3** in this function is a pointer to a table where functions and variables are stored for the scripts.

Example
~~~~~~~

It is possible to hook the `EventMain` function and implement your own logic, an example of this in the video below.

++++
<iframe width="560" height="315" src="https://www.youtube.com/embed/-9BbhLukBac" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
++++

In this video `EventMain` is hooked to the function below
[source,cpp]
----
int HookedEventMain(int gametracker, int unit, int a3)
{
	auto instanceFind = 
		((int(__cdecl*)(int)) *(DWORD*)(a3 + 252));
	auto instanceQuery = 
		((int(__cdecl*)(int, int)) *(DWORD*)(a3 + 236));
	auto instancePost = 
		((void(__cdecl*)(DWORD, DWORD, int)) *(DWORD*)(a3 + 240));
	auto instanceKill = 
		((void(__cdecl*)(DWORD, int)) *(DWORD*)(a3 + 352));

	// call instanceFind to get an instance of level object by a fixed 'intro' id
	auto lever = instanceFind(3367);
	auto door = instanceFind(3349);

	// query the lever until it returns 1
	if (lever && instanceQuery(lever, 233) == 1)
	{
		// post to the door to open
		instancePost(door, 8388753, 0);
	}
}
----

Another example below, this turns the door security light to green after the player have shot the target behind the painting.

[source,cpp]
----
auto target = instanceFind(4568); // sw_ma_shootable_switch
auto light = instanceFind(4603); // ae_ma_security_light

if (target && instanceQuery(target, 245) == 1)
{
	instancePost(light, 8388752, 1);
}
----


Function table
~~~~~~~~~~~~~~

The third parameter in `EventMain` will always be a pointer to a table of functions and other data which the game scripts will use. Below a table of known offsets.

[cols="10%,30%,60%"]
|===
|Offset |Name |Description

|224
|Version
|`4103` on PC, scripts return "wrong event version for pu1\n" if it doesn't match

|236
|InstanceQuery(Instance* instance, int unk1)
|Get a value from an instance e.g. a lever `instanceQuery(lever, 233) == 1`

|240
|InstancePost(Instance* instance, int unk1, int data)
|Post data to an instance

|252
|InstanceFind(int intro)
|Find an instance by unique 'intro' id

|1016
|LoadChapter(char* chapter)
|Loads a chapter by name (chapter0, chapter1, chapter2, chapter3, chapter4)

|1308
|IsPs2()
|Hardcoded to return 0 on PC

|1512
|StartBlockingCine(char* cine)
|Starts a cinematic
|===
