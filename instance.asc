Instance
--------

Every object, enemy or player is an instance, the game can hold up to 208 instances in memory. Examples of instances are:

* Lara
* Levers, pressure plates and doors
* Ropes and swing poles
* Inventory items and grappling hook
* Enemies
* Water

Below images are taken without any instances loaded (minus lara)

[cols="2*",frame="none"]
|===
|image:images/1.jpg[width=500] Doors, levers and movable platforms missing
|image:images/2.jpg[width=500]

|image:images/3.jpg[width=500]
|image:images/4.jpg[width=500] Water missing
|===

A picture with instances highlighted by their name draw at the position.

image:images/instances.png[width=500]

Offsets
~~~~~~~

[cols="10%,90%a"]
|===
|Offset
|Description

|16
|Position

|48
|Rotation

|80
|Scale

|96
|Shadow position

|148
|Pointer to the object

|177
|Model id

|236
|Instance id

|448
|data

|464
|Intro id

|572
|extraData

|===

data and extraData can for different instances have different data an example of data is for enemies offset 72 which is the health.

Query, post and process
~~~~~~~~~~~~~~~~~~~~~~~

While interacting with instances you often call `InstancePost` and `InstanceQuery`, underwater these actually call the `queryFunc` and `messageFunc` for the object for example for switches this is `SWITCH_Query`.

Each object also has a `processFunc` which is always called.

Instances Messages
~~~~~~~~~~~~~~~~~~

Player
^^^^^^

[cols="10%,45%,45%"]
|===
|Message
|Description
|Data

|262256
|Give inventory item
|The gear id of the item (see <<_inventory_item_ids>>)

|262261
|Select gear item
|The inventory item id

|===

Switch
^^^^^^

[cols="10%,45%,45%"]
|===
|Message
|Description
|Data

|8388753
|Toggle the switch to a direction
|The direction to rotate the switch to, 1 = down, 2 = up

|===

Creation
~~~~~~~~

An instance can be spawned by calling one of the game's \'birth' functions, the game will check if there is space in the instance pool (else return 0) and get the next instance id.

[source,cpp]
----
// generated by IDA decompiler
result = (_DWORD *)gInstances;
if ( !gInstances )
	return 0;
gInstances = *(_DWORD *)(gInstances + 8); // next instance
v1 = dword_817D64;
v2 = dword_817D64 == 0;
dword_817D64 = result;
result[2] = v1;
if ( !v2 )
v1[3] = result;
result[3] = 0;
result[59] = gNextInstanceId++; // assign next instance id to instance
++gNumInstances;
return result; // return instance
----