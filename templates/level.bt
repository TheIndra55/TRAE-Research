//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: level.bt
//   Authors: TheIndra
// File Mask: *.gnc
//------------------------------------------------

struct cdcVector
{
    float x;
    float y;
    float z;
    float w;
};

// same as relocations.bt

struct SectionInfo
{
    uint32 magic;
    int32 size;
    byte type;
    byte pad;
    uint16 versionID;
    struct {
        uint32 hasDebugInfo : 1;
        uint32 resourceType : 7;
        uint32 numRelocations : 24;        
    } packedData;
    uint32 id;
    uint32 specMask;
} section <fgcolor=cGreen>;

struct Relocation
{
    struct {
        uint16 type : 3;
        uint16 sectionIndexOrType : 13;
    } typeAndSectionInfo;
    int16 typeSpecific;
    uint32 offset <fgcolor=cRed>;
} relocation[section.packedData.numRelocations] <fgcolor=cRed>;

local int levelStart = FTell();
Printf("%d", levelStart);

// taken from TR7.pdb
struct Level {
  uint32 terrain;
  float waterZLevel;
  byte backColorR;
  byte backColorG;
  byte backColorB;
  char cpad1;
  char spectralColorR;
  char spectralColorG;
  char spectralColorB;
  char spectralFXAlways;
  char waterColorR;
  char waterColorG;
  char waterColorB;
  char waterBlend;
  float farPlane;
  float fogFar;
  float fogNear;
  float spectralFarPlane;
  float spectralFogFar;
  float spectralFogNear;
  float waterFarPlane;
  float waterFogFar;
  float waterFogNear;
  int UnderwaterFXAlpha;
  float UnderwaterFXMovement;
  float UnderwaterFXSpeed;
  int SpectralFXAlpha;
  float SpectralFXIncrease;
  float SpectralFXCenter;
  int WaterFXAlpha;
  float WaterFXMovement;
  float WaterFXSpeed;
  int WaterFSFX;
  int numMarkUps;
  uint32 markupList;
  int numCameras;
  uint32 cameraList;
  int flags;
  int numIntros;
  uint32 introList;
  uint32 objectNameList;
  uint32 worldName; 
  uint32 startGoingIntoWaterSignal;
  uint32 startGoingOutOfWaterSignal;
  int unitFlags;
  uint32 SignalListStart;
  uint32 SignalIDList;
  uint32 splineCameraData;
  uint32 relocModule;
  int NumberOfSFXMarkers;
  uint32 SFXMarkerList;
  unsigned int versionNumber; // 79824059
  unsigned int guiID;
  uint32 dynamicMusicName;
  int streamUnitID;
  uint32 textureLoadList;
  uint32 planData;
  unsigned int mapRegion;
  int32 WeatherHeightmapData;
  uint32 attackWaveList;
  uint32 attackWaveGroupList;
  uint32 combatDoorsList;
  int numTerrainLights;
  uint32 terrainLights;
  uint32 terrainLightGrids;
  uint32 vmarkerList;
  uint32 pmarkerList;
  uint32 playerName;
} level <fgcolor=cBlue>;

// skip to intro list
FSeek(levelStart + level.introList);

struct Intro
{
	cdcVector rotation;
	cdcVector position;
	cdcVector dummy1;
	cdcVector dummy2;
	cdcVector scale;
	int16 objectID; // this is the id of the object, see default\trae\pc-w\objectlist.txt for all objects and their id
	uint16 intronum;
	uint32 UniqueID; // this is the unique intro id
	float maxRad;
	uint32 introFlags;
	uint32 attachedVMO;
	uint32 data;
	uint32 multiSpline;
	uint16 startFrame;
	uint16 endFrame;
} intros[level.numIntros] <fgcolor=cYellow>;

// skip to objectNameList
FSeek(levelStart + level.objectNameList);

while ( ReadShort( FTell() ) != 0 )
    uint16 objectNameList <fgcolor=0xffa500>;

// MarkUp
FSeek(levelStart + level.markupList);

struct MarkUp
{
    int OverrideMovementCamera;
    int DTPCameraDataID;
    int DTPMarkupDataID;
    uint flags;
    int16 introID;
    int16 markupID;
    float pos[3];
    int16 bbox[6];
    uint32 polyLine; // offset - needs relocation
} markups[level.numMarkUps] <fgcolor=cGreen>;

// display every markup polyline
local int i;
for(i = 0; i < level.numMarkUps; i++)
{
    if(markups[i].polyLine != 0)
    {
        FSeek(levelStart + markups[i].polyLine); 
    
        struct PolyLine
        {
          int numPoints;
          cdcVector point[numPoints];
        } polyline <fgcolor=cBlue>;
    }
}

FSeek(levelStart + level.playerName);

string playerName <fgcolor=cGreen>;

FSeek(levelStart + level.worldName);

string worldName <fgcolor=cGreen>;

// Seek to WaterVolumeIntroData of intro 5
FSeek(levelStart + intros[5].data);

struct IntroData
{
  int type;
} introData;

struct WaterVolumeIntroData
{
    float InViewRemoveDist;
    float OutOfViewRemoveDist;
    char UseModel;
    char pad0;
    unsigned int16 pad1;
    unsigned int16 Flags;
    int16 AttachedInstance;
    float SwingLength;
    int DTPCameraID;
    
    // WaterVolumeIntroData
    float waterDepth;
    int16 waterInflow;
    int16 waterOutflow;
    float waterSpeed;
    float flowRadius;
    int16 bobHeight;
    int16 bobFrequency;
    float bobGridSize;
    int16 priority;
    unsigned int16 waterFlags;
} waterintro;